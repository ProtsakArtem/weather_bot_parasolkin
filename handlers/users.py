from aiogram import types
import src.services.user_sql as user_sql
from src.keyboards import reply, inline
from src.services import weather_sql, parse_weather
from src.config import bot, dp


@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, """
–ü—Ä–∏–≤—ñ—Ç, {0.first_name}!
–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ü–∞—Ä–∞—Å–æ–ª—å–∫—ñ–Ω ‚òÇÔ∏è
–Ø –∑–Ω–∞—é –ø–æ–≥–æ–¥—É –Ω–∞–ø–µ—Ä–µ–¥, —ñ –Ω–µ –¥–∞–º —Ç–æ–±—ñ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –ø—ñ–¥ –¥–æ—â)
–¢–∞–∫–æ–∂, —è –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ç–æ–±—ñ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞–ø–µ—Ä–µ–¥.
–Ø –º–∞—é —Ç—Ä–∏ —Ä–µ–∂–∏–º–∏:
1) –©–æ–¥–µ–Ω–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞. –Ø –±—É–¥—É —â–æ–¥–Ω—è –∑—Ä–∞–Ω–∫—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —Å–≤—ñ–∂–µ–Ω—å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –¥–µ–Ω—å.
2) –ï–∫—Å—Ç—Ä–µ–Ω–∞. –Ø –±—É–¥—É —Ç—É—Ä–±—É–≤–∞—Ç–∏ —Ç–µ–±–µ —Ç—ñ–ª—å–∫–∏ —É —Ä–∞–∑—ñ —è–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ –¥–æ—â, –∞–±–æ —â–µ —è–∫–∞—Å—å –±—ñ–¥–∞.
3) –°–æ—Ü—ñ–æ—Ñ–æ–±–Ω–∏–π —Ä–µ–∂–∏–º. –ù–µ –±—É–¥—É —Ç–æ–±—ñ –ø–∏—Å–∞—Ç–∏ –ø–µ—Ä—à–∏–º, –±—É–¥—É —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ç–æ–±—ñ —è–∫ –±—É–¥–µ—à –ø–∏—Ç–∞—Ç–∏—Å—å –∑–∞ –ø–æ–≥–æ–¥—É.

–ó—Ä–æ–±–∏ —Å–≤—ñ–π –≤–∏–±—ñ—Äüëá
""".format(message.from_user), reply_markup=reply.sub_choice_mark)
    user_sql.add_new_user(message.from_user.id, "0", "0")


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text in "üìÖ –©–æ–¥–µ–Ω–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –µ–∫—Å—Ç—Ä–µ–Ω—ñü§ê –ú–æ–≤—á—É":
        if message.text == "ü§ê –ú–æ–≤—á—É":
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–µ, –±—É–¥—É –º–æ–≤—á–∞—Ç–∏ üôä")
            user_sql.add_sub_to_user(message.from_user.id, "silence")
        elif message.text == "‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –µ–∫—Å—Ç—Ä–µ–Ω—ñ":
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–µ, –±—É–¥—É –Ω–∞–º–∞–≥–∞—Ç–∏—Å—å –Ω–µ —Ç—Ä–∏–≤–æ–∂–∏—Ç–∏ —Ç–µ–±–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ ‚ùï")
            user_sql.add_sub_to_user(message.from_user.id, "alert")
        elif message.text == "üìÖ –©–æ–¥–µ–Ω–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞":
            await bot.send_message(message.from_user.id, "–ß—É–¥–æ–≤–æ, –±—É–¥—É –ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ —â–æ–¥–Ω—è ü•∞")
            user_sql.add_sub_to_user(message.from_user.id, "everyday")
        await bot.send_message(message.from_user.id, "–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π –¥—ñ–∑–Ω–∞–π–º–æ—Å—è –≤ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è", reply_markup=reply.set_location_mark)

    if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é ‚óÄÔ∏è":
        await bot.send_message(message.from_user.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –º–µ–Ω—é",
                               reply_markup=reply.main_mark)

    if message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—ÉüîÑ":
        await bot.send_message(message.from_user.id, "–û–±–µ—Ä–∏ –ø—ñ–¥–ø–∏—Å–∫—É —è–∫—É —Ç–∏ —Ö–æ—á–µ—à üëá", reply_markup=reply.sub_choice_mark)

    if message.text == "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ–≥–æ–¥–∫—Éüå§":
        await bot.send_message(message.from_user.id, "–ù–∞ –∫–æ–ª–∏ –¥–∏–≤–∏–º–æ—Å—å?", reply_markup=reply.weather_tri_mark)

    if message.text in "–ü–æ–≥–æ–¥–∫–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ‚ñ∂Ô∏è–ü–æ–≥–æ–¥–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚è©–ü–æ–≥–æ–¥–∫–∞ —á–µ—Ä–µ–∑ –¥–µ–Ω—å ‚è≠":
        day, text = "today", "—Å—å–æ–≥–æ–¥–Ω—ñ"
        if message.text == "–ü–æ–≥–æ–¥–∫–∞ —á–µ—Ä–µ–∑ –¥–µ–Ω—å ‚è≠":
            day = "after_tomorrow"
            text = "–ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞"
        elif message.text == "–ü–æ–≥–æ–¥–∫–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ‚ñ∂Ô∏è":
            print("TEST")
            day = "today"
            text = "—Å—å–æ–≥–æ–¥–Ω—ñ"
        elif message.text == "–ü–æ–≥–æ–¥–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚è©":
            day = "tomorrow"
            text = "–∑–∞–≤—Ç—Ä–∞"
        weather_data = weather_sql.get_weather_values(user_sql.get_coordinates(message.from_user.id), day=day)
        msg = f"""
–ü–æ–≥–æ–¥–∞ –Ω–∞ {text}: {weather_data[0]}
–°–æ–Ω–µ—á–∫–æ –≤—Å—Ç–∞—î –æ {weather_data[1]} üåÖ
–®–∞–Ω—Å –Ω–∞ –æ–ø–∞–¥–∏üíß : {weather_data[4]}% 
–û–ø–∞–¥–∏ {text} –±—É–¥—É—Ç—å {weather_data[2]} –≥–æ–¥–∏–Ωüïí
–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°: {weather_data[3]} C¬∞
–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—Éüí®: {weather_data[5]}
"""
        if day == "today":
            await bot.send_message(message.from_user.id, msg, reply_markup=inline.mark_more_today)
        elif day == "tomorrow":
            await bot.send_message(message.from_user.id, msg, reply_markup=inline.mark_more_tomorrow)
        elif day == "after_tomorrow":
            await bot.send_message(message.from_user.id, msg, reply_markup=inline.mark_more_after_tomorrow)


@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    user_sql.add_location_to_user(message.from_user.id, f"{round(message.location.latitude, 2)} {round(message.location.longitude, 2)}")
    weather_sql.update_weather_data(parse_weather.parse_weather(round(message.location.latitude, 2), round(message.location.longitude, 2)))
    await bot.send_message(message.from_user.id, "–ú–æ–ª–æ–¥—á–∏–Ω–∫–∞) –Ø –∑–∞–ø–∞–º'—è—Ç–∞–≤ —Ç–≤–æ—î –º—ñ—Å—Ç–æ! –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏-–ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –º—ñ—Ç–∫—É —â–µ —Ä–∞–∑.", reply_markup=reply.main_mark)


@dp.callback_query_handler()
async def handle_callback(callback: types.CallbackQuery):
    if callback.data in "?more_info_after_tomorrow?more_info_tomorrow?more_info_today":
        day = "today"
        if callback.data == "?more_info_after_tomorrow":
            day = "after_tomorrow"
        elif callback.data == "?more_info_today":
            day = "today"
        elif callback.data == "?more_info_tomorrow":
            day = "tomorrow"
        temp, drop, wind = weather_sql.get_hour_values(user_sql.get_coordinates(callback.from_user.id), day=day)
        print(temp, drop, wind)
        msg = f"""
üïò             üå°             üíß          üí®
0:00           {temp[0]} ¬∞–°      {drop[0]}%     {wind[0]} –º/c
3:00           {temp[1]} ¬∞–°      {drop[1]}%     {wind[1]} –º/c
6:00           {temp[2]} ¬∞–°      {drop[2]}%     {wind[2]} –º/c
9:00           {temp[3]} ¬∞–°      {drop[3]}%     {wind[3]} –º/c
12:00          {temp[4]} ¬∞–°      {drop[4]}%     {wind[4]} –º/c
15:00          {temp[5]} ¬∞–°      {drop[5]}%     {wind[5]} –º/c
18:00          {temp[6]} ¬∞–°      {drop[6]}%     {wind[6]} –º/c
21:00          {temp[7]} ¬∞–°      {drop[7]}%     {wind[7]} –º/c
"""

        await bot.send_message(callback.from_user.id, msg)
